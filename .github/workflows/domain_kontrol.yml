name: Domain Check and Update
on:
  schedule:
    - cron: '*/30 * * * *'  # Her 30 dakikada bir çalışır
  workflow_dispatch:  # Manuel çalıştırma için

jobs:
  check-and-update-domain:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install requests
      run: pip install requests

    - name: Get current domain from file or set default
      id: get_domain
      run: |
        if [ -f "domain.txt" ]; then
          CURRENT_DOMAIN=$(grep -o 'URL=[^"]*' domain.txt | cut -d'=' -f2)
          echo "Mevcut domain: $CURRENT_DOMAIN"
        else
          CURRENT_DOMAIN="https://trgoals1397.xyz"
          echo "domain.txt bulunamadı, varsayılan domain: $CURRENT_DOMAIN"
        fi
        
        DOMAIN_NUMBER=$(echo $CURRENT_DOMAIN | grep -o '[0-9]\+')
        echo "current_domain=$CURRENT_DOMAIN" >> $GITHUB_OUTPUT
        echo "domain_number=$DOMAIN_NUMBER" >> $GITHUB_OUTPUT
        echo "Mevcut domain numarası: $DOMAIN_NUMBER"

    - name: Check domains and update if needed
      run: |
        python -c "
        import requests
        import os
        
        current_domain = os.environ['CURRENT_DOMAIN']
        domain_number = int(os.environ['DOMAIN_NUMBER'])
        
        def check_domain(domain):
            try:
                response = requests.get(domain, timeout=10, allow_redirects=True)
                return response.status_code == 200
            except:
                return False
        
        # Mevcut domaini kontrol et
        current_active = check_domain(current_domain)
        print(f'Mevcut domain ({current_domain}) aktif mi: {current_active}')
        
        # Bir üst domaini kontrol et
        next_domain = f'https://trgoals{domain_number + 1}.xyz'
        next_active = check_domain(next_domain)
        print(f'Bir üst domain ({next_domain}) aktif mi: {next_active}')
        
        # Hangi domainin kullanılacağını belirle
        if next_active:
            selected_domain = next_domain
            print(f'Bir üst domain aktif, kullanılacak: {selected_domain}')
            
            # domain.txt dosyasını güncelle
            with open('domain.txt', 'w') as f:
                f.write(f'<meta http-equiv=\\"refresh\\" content=\\"0;URL={selected_domain}\\">')
            
            # Değişiklikleri commit et
            import subprocess
            subprocess.run(['git', 'config', 'user.name', 'github-actions'])
            subprocess.run(['git', 'config', 'user.email', 'github-actions@github.com'])
            subprocess.run(['git', 'add', 'domain.txt'])
            subprocess.run(['git', 'commit', '-m', f'Domain güncellendi: {selected_domain}'])
            subprocess.run(['git', 'push'])
            
        else:
            print(f'Bir üst domain aktif değil, mevcut domain korunacak: {current_domain}')
        "
      env:
        CURRENT_DOMAIN: ${{ steps.get_domain.outputs.current_domain }}
        DOMAIN_NUMBER: ${{ steps.get_domain.outputs.domain_number }}
